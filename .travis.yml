sudo: true

language: cpp

addons: &addons
  apt:
    packages: &common_deps
      - cmake
      - libtbb-dev
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-4.0
      - llvm-toolchain-trusty-5.0

cache:
  apt: true
#  ccache: true
#  directories:
#    - $BUILD_DEPS


# Do not build our sync branch.
branches:
  only:
    - master
    - "*Travis*"

matrix:
  include:
    # There seems to be a hard limit to how many machines a Travis build will
    # across all platforms. By interleaving OS X, the hope is to get in the
    # queue faster while not blocking Linux builds from occuring.

    # Coverage
    - env: CXX=g++ CC=gcc BUILD_TYPE=Debug EXTRA_OPTS="-DCoverage=On"
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'lcov']

    # GCC 5
    - env: CXX=g++-5 CC=gcc BUILD_TYPE=Debug
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-5', 'g++-5-multilib', 'libc6-dbg']
    - env: CXX=g++-5 CC=gcc BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-5', 'g++-5-multilib', 'libc6-dbg']

    # GCC 6
    - env: CXX=g++-6 CC=gcc BUILD_TYPE=Debug
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-6', 'g++-6-multilib', 'libc6-dbg']
    - env: CXX=g++-6 CC=gcc BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-6', 'g++-6-multilib', 'libc6-dbg']

    # Clang 4
    - env: CXX=clang++-4.0 CC=clang-4.0 BUILD_TYPE=Debug
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-4.0', 'g++-multilib', 'libc6-dbg']
    - env: CXX=clang++-4.0 CC=clang-4.0 BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-4.0', 'g++-multilib', 'libc6-dbg']

    # Clang 5
    - env: CXX=clang++-5.0 CC=clang-5.0 BUILD_TYPE=Debug
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-5.0', 'g++-multilib', 'libc6-dbg']
    - env: CXX=clang++-5.0 CC=clang-5.0 BUILD_TYPE=Release
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-5.0', 'g++-multilib', 'libc6-dbg']

    # Xcode 7.3 Clang
    - env: CXX=clang++ CC=clang
      compiler: clang
      osx_image: xcode7.3
      os: osx

    # Xcode 8 Clang
    - env: CXX=clang++ CC=clang
      compiler: clang
      osx_image: xcode8
      os: osx

    # Xcode 8.1 Clang
    - env: CXX=clang++ CC=clang
      compiler: clang
      osx_image: xcode8.1
      os: osx

    # Xcode 8.3 Clang
    - env: CXX=clang++ CC=clang
      compiler: clang
      osx_image: xcode8.3
      os: osx


    # OSX GCC 5
    - env: CXX=g++-5 CC=gcc
      compiler: gcc
      osx_image: xcode7.3
      os: osx

    # OSX GCC 6
    - env: CXX=g++-6 CC=gcc
      compiler: gcc
      osx_image: xcode8.3
      os: osx

before_install:
  - wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
  - sudo dpkg -i cvmfs-release-latest_all.deb
  - sudo apt-get update
  - sudo apt-get install cvmfs cvmfs-config-default
  - rm -f cvmfs-release-latest_all.deb
  - sudo mkdir -p /etc/cvmfs/
  - echo "CVMFS_REPOSITORIES=sft.cern.ch,projects.cern.ch" > default.local
  - echo "CVMFS_HTTP_PROXY=DIRECT" >> default.local
  - sudo mv default.local /etc/cvmfs/
  - sudo /etc/init.d/autofs stop
  - sudo cvmfs_config setup
  - sudo mkdir -p /cvmfs/sft-nightlies.cern.ch
  - sudo mount -t cvmfs sft-nightlies.cern.ch /cvmfs/sft-nightlies.cern.ch
  - ls /cvmfs/sft-nightlies.cern.ch
  # Install GSL 2.0
  # FIXME: We should have it somewhere in cvmfs.
  - sudo add-apt-repository -y ppa:tsvetko.tsvetkov/trusty-backports && sudo apt-get update
  - sudo apt-get install libgsl2

install:
  - |
    pwd
    HOME_FOLDER=$(pwd)/../
    if [ "${EXTRA_OPTS}" == "-DCoverage=On" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
       export GCOV_PREFIX="$HOME_FOLDER/ROOT-gcov/"
       mkdir -p $GCOV_PREFIX
       #export GCOV_PREFIX_STRIP=16
       PATH=~/.local/bin:${PATH};
       pip install --user --upgrade pip;
       pip install --user cpp-coveralls;
    fi
  # OSX and GCC
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      # brew install ccache
      # brew install valgrind
      # cmake
      if brew list -1 | grep -q "^cmake\$"; then
        brew outdated cmake || brew upgrade cmake
      else
        brew install cmake
      fi

      # GCC
      if [[ "$CC" == "gcc" ]]; then
        GCC_VERSION=${CXX##g++-} # Convert g++-4.9 to 4.9
        GCC_VERSION_DEC=${GCC_VERSION//./} # convert 4.9 to 49
        brew install gcc$GCC_VERSION_DEC
      fi
    fi

script:
- echo "Downloading Latest ROOT binaries."
- |
  # Go one level up from REPO_SLUG/rootbench
  cd $HOME_FOLDER
  mkdir root
  d=$(date +%a)
  for i in `seq 1 7`; do
    ROOT_LOCATION=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/rootcov/$d/ROOT/
    ROOT_THISROOT=$ROOT_LOCATION/HEAD-a512e/x86_64-ubuntu1404-gcc48-opt/bin/thisroot.sh
    if ls $ROOT_THISROOT ; then
       break;
    fi
    d=$(date +%a -d "$d - 1 day")
  done;
- |
  cd root
  echo "Initializing ROOT $ROOT_THISROOT"
  source $ROOT_THISROOT
  which root
  cd $HOME_FOLDER
- mkdir $HOME_FOLDER/build
- cd $HOME_FOLDER/build
- cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${EXTRA_FLAGS}" \
        ${EXTRA_OPTS} ../rootbench
- cmake --build .
- ctest -V --output-on-failure
- find $GCOV_PREFIX
- #find $HOME_FOLDER

after_success:

- |
  # FIXME: Figure out the right coveralls arguments to send the reports.
  if [ "${EXTRA_OPTS}" == "-DCoverage=On" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
    coveralls --verbose --gcov-options '\-lp' --root $HOME_FOLDER --build-root $HOME_FOLDER;
  fi

on_failure:
  -|
   echo "Showing current directory contents"
   ls -la

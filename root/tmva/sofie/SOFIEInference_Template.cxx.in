// @HEAD_COMMENT@
// Author: Federico Sossai (fsossai), 2021

#include <benchmark/benchmark.h>

#include <iostream>
#include <vector>
#include <functional>
#include <unordered_map>

@INCLUDE_HEADERS@

using namespace std;

static void @FUNC_NAME@(benchmark::State& state, std::string model_name)
{
    vector<float> input;

    typedef function<vector<float>(float*)> infer_t;
    typedef 
    unordered_map<string, pair<infer_t, size_t>> all_infer_funcs{
@FUNC_TUPLES@
    };

    infer_t infer_func;
    size_t input_size;
    tie(infer_func, input_size) = all_infer_funcs[model_name];
    //input.resize(input_size);
    input.resize(10'000); // temporary remedy


    for (auto _ : state) {
        infer_func(input.data());
    }
}
@BENCHMARK_CAPTURES@

BENCHMARK_MAIN();

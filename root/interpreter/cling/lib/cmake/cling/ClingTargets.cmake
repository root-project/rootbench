# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS clingInterpreter clingMetaProcessor clingUtils clingDemoPlugin)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target clingInterpreter
add_library(clingInterpreter STATIC IMPORTED)

set_target_properties(clingInterpreter PROPERTIES
  INTERFACE_LINK_LIBRARIES "clingUtils;clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMJITLink;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo"
)

# Create imported target clingMetaProcessor
add_library(clingMetaProcessor STATIC IMPORTED)

set_target_properties(clingMetaProcessor PROPERTIES
  INTERFACE_LINK_LIBRARIES "clangLex;clangAST;clangBasic;clingInterpreter;clingUtils;LLVMCore;LLVMSupport;LLVMBinaryFormat"
)

# Create imported target clingUtils
add_library(clingUtils STATIC IMPORTED)

set_target_properties(clingUtils PROPERTIES
  INTERFACE_LINK_LIBRARIES "clangCodeGen;clangDriver;clangFrontend;clangParse;clangSema;clangAnalysis;clangEdit;clangRewrite;clangRewriteFrontend;clangSerialization;clangAST;clangBasic;clangLex;dl;LLVMAnalysis;LLVMCore;LLVMCoroutines;LLVMCoverage;LLVMExecutionEngine;LLVMipo;LLVMLTO;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMBinaryFormat;LLVMAArch64CodeGen;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMNVPTXCodeGen;LLVMNVPTXDesc;LLVMNVPTXInfo"
)

# Create imported target clingDemoPlugin
add_library(clingDemoPlugin SHARED IMPORTED)

set_target_properties(clingDemoPlugin PROPERTIES
  INTERFACE_LINK_LIBRARIES "-Wl,-w;-Wl,-bind_at_load;-Wl,-undefined,dynamic_lookup"
)

# Import target "clingInterpreter" for configuration "Release"
set_property(TARGET clingInterpreter APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(clingInterpreter PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/abhiacherjee/Documents/rootbench/root/lib/libclingInterpreter.a"
  )

# Import target "clingMetaProcessor" for configuration "Release"
set_property(TARGET clingMetaProcessor APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(clingMetaProcessor PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/abhiacherjee/Documents/rootbench/root/lib/libclingMetaProcessor.a"
  )

# Import target "clingUtils" for configuration "Release"
set_property(TARGET clingUtils APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(clingUtils PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "/Users/abhiacherjee/Documents/rootbench/root/lib/libclingUtils.a"
  )

# Import target "clingDemoPlugin" for configuration "Release"
set_property(TARGET clingDemoPlugin APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(clingDemoPlugin PROPERTIES
  IMPORTED_LOCATION_RELEASE "/Users/abhiacherjee/Documents/rootbench/root/interpreter/cling/tools/plugins/example/libclingDemoPlugin.dylib"
  IMPORTED_SONAME_RELEASE "@rpath/libclingDemoPlugin.dylib"
  )

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "clangCodeGen" "clangDriver" "clangFrontend" "clangParse" "clangSema" "clangAnalysis" "clangEdit" "clangRewrite" "clangRewriteFrontend" "clangSerialization" "clangAST" "clangBasic" "clangLex" "LLVMAnalysis" "LLVMCore" "LLVMCoroutines" "LLVMCoverage" "LLVMExecutionEngine" "LLVMipo" "LLVMJITLink" "LLVMLTO" "LLVMMC" "LLVMObject" "LLVMOption" "LLVMOrcJIT" "LLVMRuntimeDyld" "LLVMScalarOpts" "LLVMSupport" "LLVMTarget" "LLVMTransformUtils" "LLVMBinaryFormat" "LLVMAArch64CodeGen" "LLVMAArch64AsmParser" "LLVMAArch64Desc" "LLVMAArch64Disassembler" "LLVMAArch64Info" "LLVMAArch64Utils" "LLVMNVPTXCodeGen" "LLVMNVPTXDesc" "LLVMNVPTXInfo" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)

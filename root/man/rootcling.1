.TH rootcling 1 
.SH SYNOPSIS
usage: rootcling [-f F] [-v V] [-v0 V0] [-v1 V1] [-v2 V2] [-v3 V3] [-v4 V4] [-m M] [-rmf RMF]
                 [-rml RML] [-split SPLIT] [-s S] [-multiDict MULTIDICT]
                 [-inlineInputHeader INLINEINPUTHEADER] [-interpreteronly INTERPRETERONLY]
                 [-noIncludePaths NOINCLUDEPATHS] [-excludePath EXCLUDEPATH]
                 [--lib-list-prefix LIB_LIST_PREFIX]

.SH DESCRIPTION
This program generates the dictionaries needed for performing I/O of classes.
.SH OPTIONS
.IP -f
Overwrite an existing output file
.IP
The output file must have the .cxx, .C, .cpp, .cc or .cp extension.
.IP

.IP -v
Display all messages
.IP -v0
Display no messages at all
.IP -v1
Display only error messages
.IP -v2
Display error and warning messages (default).
.IP -v3
Display error, warning and note messages
.IP -v4
Display all messages
.IP

.IP -m
Specify absolute or relative path Clang pcm file to be loaded
.IP
The pcm file (module) produced by this invocation of rootcling
.IP
will not include any of the declarations already included in the
.IP
pcm files loaded via -m.  There can be more than one -m
.IP

.IP -rmf
Rootmap file name
.IP
Name of the rootmap file. In order to be picked up by ROOT it must
.IP
have .rootmap extension
.IP

.IP -rml
Rootmap library name
.IP
Specify the name of the library which contains the autoload keys. This
.IP
switch can be specified multiple times to autoload several libraries in
.IP
presence of a particular key
.IP

.IP -split
Split the dictionary
.IP
Split the dictionary in two, putting the ClassDef functions in a separate
.IP
file
.IP

.IP -s
Target library name
.IP
The flag -s must be followed by the name of the library that will
.IP
contain the object file corresponding to the dictionary produced by
.IP
this invocation of rootcling.
.IP
The name takes priority over the one specified for the rootmapfile.
.IP
The name influences the name of the created pcm:
.IP
   1) If it is not specified, the pcm is called libINPUTHEADER_rdict.pcm
.IP
   2) If it is specified, the pcm is called libTARGETLIBRARY_rdict.pcm
.IP
      Any "liblib" occurence is transformed in the expected "lib"
.IP
   3) If this is specified in conjunction with --multiDict, the output is
.IP
      libTARGETLIBRARY_DICTIONARY_rdict.pcm
.IP

.IP -multiDict
Enable support for multiple pcms in one library
.IP
Needs the -s flag. See its documentation.
.IP

.IP -inlineInputHeader
Add the argument header to the code of the dictionary
.IP
This allows the header to be inlined within the dictionary
.IP

.IP -interpreteronly
No IO information in the dictionary
.IP

.IP -noIncludePaths
Do not store the headers' directories in the dictionary
.IP
Instead, rely on the environment variable $ROOT_INCLUDE_PATH at runtime
.IP

.IP -excludePath
Specify a path to be excluded from the include paths
.IP
specified for building this dictionary
.IP

.IP --lib-list-prefix
Specify libraries needed by the header files parsed
.IP
This feature is used by ACliC (the automatic library generator).
.IP
Rootcling will read the content of xxx.in for a list of rootmap files (see
.IP
rlibmap). Rootcling will read these files and use them to deduce a list of
.IP
libraries that are needed to properly link and load this dictionary. This
.IP
list of libraries is saved in the first line of the file xxx.out; the
.IP
remaining lines contains the list of classes for which this run of
.IP
rootcling produced a dictionary
.IP

